[{"/Users/js/Downloads/task_react_topic/src/index.js":"1","/Users/js/Downloads/task_react_topic/src/App.js":"2","/Users/js/Downloads/task_react_topic/src/reportWebVitals.js":"3","/Users/js/Downloads/task_react_topic/src/components/searchbar.jsx":"4","/Users/js/Downloads/task_react_topic/src/components/display.jsx":"5","/Users/js/Downloads/task_react_topic/src/components/searchResult.jsx":"6"},{"size":929,"mtime":1615997497472,"results":"7","hashOfConfig":"8"},{"size":1097,"mtime":1615998286619,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1607580903000,"results":"10","hashOfConfig":"8"},{"size":1096,"mtime":1615998378947,"results":"11","hashOfConfig":"8"},{"size":970,"mtime":1615997700647,"results":"12","hashOfConfig":"8"},{"size":3090,"mtime":1615997758090,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"dwumne",{"filePath":"18","messages":"19","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"17"},"/Users/js/Downloads/task_react_topic/src/index.js",["30"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport \"font-awesome/css/font-awesome.css\";\nimport { InMemoryCache, ApolloClient, ApolloProvider} from '@apollo/client';\n\n\nconst client = new ApolloClient({\n  uri: 'https://api.github.com/graphql',\n  cache: new InMemoryCache(),\n  headers:{\n    authorization:  `Bearer dd45684a5387787c97f833334c3a8cc93e011e09`\n  }\n});\n\n\nReactDOM.render(\n\n    <ApolloProvider client={client}>\n        <React.StrictMode><App /></React.StrictMode>    \n    </ApolloProvider>,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n",["31","32"],"/Users/js/Downloads/task_react_topic/src/App.js",["33","34","35","36"],"import React, { Component } from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport SearchBar from './components/searchbar';\nimport { render } from '@testing-library/react';\nimport DisplayContent from \"./components/display\";\nimport styled from 'styled-components';\n\nconst HrElement = styled.hr`\n border:2px solid green;\n`\nclass App extends React.Component {\n\n  state = { searchTerm: 'react', click: 0 };\n\n  constructor() {\n    super();\n  }\n  \n  handleSearchChange = key => {\n    //update the search term when user type in the search bar\n    this.setState({ searchTerm: key });\n  \n  }\n\n  handleChange = (e) => {\n    this.setState({ searchTerm: e.target.value });\n  \n  };\n\n  render(){\n    //check to see if react will re-render\n   \n    return (\n      \n      <div>\n        <SearchBar initSearch={this.state.searchTerm} onSearchChange={this.handleSearchChange}></SearchBar>\n        <div className=\"jumbotron\">\n          <DisplayContent search={this.state.searchTerm}></DisplayContent>\n          <HrElement/>\n        \n        </div>\n     \n      </div>\n    );\n  }\n}\n\nexport default App;\n","/Users/js/Downloads/task_react_topic/src/reportWebVitals.js",[],"/Users/js/Downloads/task_react_topic/src/components/searchbar.jsx",[],"/Users/js/Downloads/task_react_topic/src/components/display.jsx",[],"/Users/js/Downloads/task_react_topic/src/components/searchResult.jsx",["37"],"import React, { useState } from \"react\";\nimport { gql, useQuery } from '@apollo/client';\n\n/***********************************************\n * tested query with Playground tool first\n * Only filter for the firt 10 on the pagination \n * - can make it dynamic in the future\n************************************************/\nconst GET_GIT_TOPICS = gql`\n  query SearchTopics($search: String!) {\n    search(query: $search, type: REPOSITORY, first: 10) {\n      repositoryCount\n      edges {\n        node {\n          ... on Repository {\n            stargazers {\n              totalCount\n            }\n            resourcePath\n            repositoryTopics(first: 10) {\n              totalCount\n              nodes {\n                topic {\n                  name\n                  stargazerCount\n                  relatedTopics {\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n\n  function SearchResult(props) {\n\n    let searchTerm = props.value;\n    const [newTopic, setTopic] = useState(searchTerm);\n    let search;\n    //initialise the search phrase - whether from user clicking on a topi or key in from navbar top\n    if(searchTerm===newTopic){\n      search = `${searchTerm} stars:>10000`; //only filter if stargazers are high to prevent junk\n    }else{\n      search = `${newTopic} stars:>10000`;\n      searchTerm = newTopic;\n      props.onChange(newTopic);\n      //updateSearchTerm(newTopic);\n    }\n   \n\n    //parsing the search phase into the gql query\n    const { loading, error, data } = useQuery(GET_GIT_TOPICS,\n      {\n        variables: { search}\n      });\n  \n    if (loading){ \n      return (\n        <div>\n          <i className=\"fa fa-spinner fa-spin mr-4\"/>\n          <span>...Searching for {search}</span>\n        </div>\n      );\n    }\n    if (error) return `Error! ${error.message}`;\n    //debug the result if needed\n   \n\n    return (\n      <React.Fragment>\n        {data && data.search.edges &&  data.search.edges.map((edge, index) => (\n          <ul className=\"list-group\"  key={index}>\n            <li className=\"list-group-item\">\n              <div className=\"d-flex justify-content-between\">\n                <h5>{edge.node.resourcePath}</h5>\n                <span className=\"badge badge-success badge-pill badge-star\"><i className=\"fa fa-star mr-2\" aria-hidden=\"true\" />{edge.node.stargazers.totalCount}</span>\n              </div>\n              <div>\n                Related Topics:\n                {edge.node.repositoryTopics.nodes.map((node,j)=>(\n                  <button key={j}\n                    onClick={() => setTopic(node.topic.name)}\n                  type=\"button\" className=\"btn btn-outline-info btn-sm mx-1 my-1\">{node.topic.name}  <span className=\"badge badge-light badge-pill\"><i className=\"fa fa-star m1-2\" aria-hidden=\"true\" />{node.topic.stargazerCount}</span></button>\n                   ))}\n              </div>\n            </li>\n          </ul>\n        ))}\n      </React.Fragment>\n    );\n  }\n\n function updateSearchTerm(data){ \n   \n  }\n\nexport default SearchResult;",{"ruleId":"38","severity":1,"message":"39","line":5,"column":8,"nodeType":"40","messageId":"41","endLine":5,"endColumn":23},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"38","severity":1,"message":"46","line":1,"column":17,"nodeType":"40","messageId":"41","endLine":1,"endColumn":26},{"ruleId":"38","severity":1,"message":"47","line":2,"column":8,"nodeType":"40","messageId":"41","endLine":2,"endColumn":12},{"ruleId":"38","severity":1,"message":"48","line":5,"column":10,"nodeType":"40","messageId":"41","endLine":5,"endColumn":16},{"ruleId":"49","severity":1,"message":"50","line":16,"column":3,"nodeType":"51","messageId":"52","endLine":18,"endColumn":4},{"ruleId":"38","severity":1,"message":"53","line":98,"column":11,"nodeType":"40","messageId":"41","endLine":98,"endColumn":27},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["54"],"no-negated-in-lhs",["55"],"'Component' is defined but never used.","'logo' is defined but never used.","'render' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'updateSearchTerm' is defined but never used.","no-global-assign","no-unsafe-negation"]